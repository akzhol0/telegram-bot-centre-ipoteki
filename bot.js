const TelegramBot = require("node-telegram-bot-api");
const sqlite3 = require("sqlite3").verbose();

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const TOKEN = "8257490360:AAGxLEH456Gdkij3vBFSKwEJKyTMlVNMuaE";
const bot = new TelegramBot(TOKEN, { polling: true });

// === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
const db = new sqlite3.Database("users.db");

// —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
db.run("CREATE TABLE IF NOT EXISTS users (chat_id INTEGER PRIMARY KEY)");

// === –ö–û–ú–ê–ù–î–´ ===
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  db.run("INSERT OR IGNORE INTO users(chat_id) VALUES(?)", [chatId]);

  bot.sendMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.");
});

// === –†–ê–°–°–´–õ–ö–ê ===
function broadcast(message) {
  db.all("SELECT chat_id FROM users", [], (err, rows) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏:", err);
      return;
    }
    rows.forEach((row) => {
      bot.sendMessage(row.chat_id, message).catch((e) =>
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e.message)
      );
    });
  });
}

// –ø—Ä–∏–º–µ—Ä: —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
setInterval(() => {
  broadcast("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!");
}, 60 * 1000);
